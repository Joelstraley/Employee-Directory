{"ast":null,"code":"var _jsxFileName = \"/Users/joelstraley/Documents/columbia/homework/Employee-Directory/src/pages/Search/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from \"react\";\nimport API from \"../../utils/API\";\nimport Container from \"../../components/Container\";\nimport SearchForm from \"../../components/SearchForm\";\nimport SearchResults from \"../../components/SearchResults\";\n/* class Search extends Component {\n  state = {\n    search: \"\", \n    employee: \"\",\n    results: [],\n    error: \"\" \n  }; */\n// When the component mounts, get a list of all available base breeds and update this.state.breeds\n\n/*  async componentDidMount() {\n     const url = \"https://api.randomuser.me/\";\n     const response = await fetch(url);\n     const data = await response.json();\n     this.setState({ employee: data.results[0]});\n     console.log(data.results[0]);\n } */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  _s();\n\n  const [search, setSearch] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    if (query) {\n      API.search(query).then(res => {\n        if (res.data.length === 0) {\n          throw new Error(\"No results found.\");\n        }\n\n        if (res.data.status === \"error\") {\n          throw new Error(res.data.message);\n        }\n\n        setImage(res.data[1][0]);\n        setName(res.data[3][0]);\n        setAddress(res.data[3][0]);\n        setPhone(res.data[3][0]);\n        setEmail(res.data[3][0]);\n      }).catch(err => setError(err));\n    }\n  }, [query]);\n\n  const handleInputChange = event => {\n    setSearch(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        minHeight: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Search For an Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        type: \"danger\",\n        style: {\n          opacity: error ? 1 : 0,\n          marginBottom: 10\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        handleInputChange: handleInputChange,\n        results: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n        name: name,\n        address: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Search, \"rVz8uRr6n8HXG7cBWeZdvH1Syr0=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/joelstraley/Documents/columbia/homework/Employee-Directory/src/pages/Search/index.js"],"names":["React","Component","useEffect","useState","API","Container","SearchForm","SearchResults","Search","search","setSearch","image","setImage","name","setName","address","setAddress","phone","setPhone","email","setEmail","error","setError","query","then","res","data","length","Error","status","message","catch","err","handleInputChange","event","target","value","minHeight","opacity","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState} from \"react\";\nimport API from \"../../utils/API\";\nimport Container from \"../../components/Container\";\nimport SearchForm from \"../../components/SearchForm\";\nimport SearchResults from \"../../components/SearchResults\";\n\n\n/* class Search extends Component {\n  state = {\n    search: \"\", \n    employee: \"\",\n    results: [],\n    error: \"\" \n  }; */\n\n  // When the component mounts, get a list of all available base breeds and update this.state.breeds\n /*  async componentDidMount() {\n      const url = \"https://api.randomuser.me/\";\n      const response = await fetch(url);\n      const data = await response.json();\n      this.setState({ employee: data.results[0]});\n      console.log(data.results[0]);\n  } */\n\n  function Search() {\n    const [search, setSearch] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n  \n    useEffect(() => {\n      if (!query) {\n        return;\n      } if (query) {\n        API.search(query)\n          .then(res => {\n            if (res.data.length === 0) {\n              throw new Error(\"No results found.\");\n            }\n            if (res.data.status === \"error\") {\n              throw new Error(res.data.message);\n            }\n            setImage(res.data[1][0]);\n            setName(res.data[3][0]);\n            setAddress(res.data[3][0]);\n            setPhone(res.data[3][0]);\n            setEmail(res.data[3][0])\n          })\n          .catch(err => setError(err));\n      }\n    }, [query]);\n  \n    const handleInputChange = event => {\n      setSearch(event.target.value);\n    };\n  \n    return (\n      <div>\n        <Container style={{ minHeight: \"100vh\" }}>\n          <h1 className=\"text-center\">Search For an Employee</h1>\n          <Alert type=\"danger\" style={{ opacity: error ? 1 : 0, marginBottom: 10 }}>\n            {error}\n          </Alert>\n          <SearchForm\n            handleInputChange={handleInputChange}\n            results={query}\n          />\n          <SearchResults name={name} address={address} />\n        </Container>\n      </div>\n    );\n  }\n  \n  export default Search;\n\n"]},"metadata":{},"sourceType":"module"}